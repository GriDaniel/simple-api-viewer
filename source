<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enterprise WebSocket Log Visualizer</title>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.16/jstree.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.16/themes/default/style.min.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        :root { --brand-color: #2563eb; }
        .post-node { background: #dbeafe !important; color: #1e40af !important; font-weight: 600; }
        .function-node { background: #f3f4f6 !important; color: #374151 !important; }
        .jstree-default .jstree-node { margin: 4px 0; }
        .jstree-default .jstree-anchor { padding: 8px 12px; border-radius: 6px; }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <div class="max-w-7xl mx-auto px-6 py-8">
        <div class="bg-white rounded-lg shadow-sm border p-6 mb-6">
            <div class="flex items-center justify-between">
                <div id="status" class="flex items-center space-x-2">
                    <div class="w-3 h-3 bg-red-500 rounded-full"></div>
                    <span class="text-sm font-medium">Connecting...</span>
                </div>
                <div class="text-sm text-gray-500">WebSocket Auto-Monitor</div>
            </div>
        </div>
        
        <div class="bg-white rounded-lg shadow-sm border">
            <div class="p-6 border-b">
                <h2 class="text-lg font-semibold">POST Request Lifecycle</h2>
            </div>
            <div id="tree" class="p-6 min-h-96"></div>
        </div>
    </div>

    <script>
        class LogVisualizer {
            constructor() {
                this.buffer = [];
                this.isBuffering = false;
                $('#tree').jstree({ core: { data: [] } });
                this.connect();
            }

            connect() {
                if (this.ws) this.ws.close();
                this.updateStatus('connecting');
                
                this.ws = new WebSocket('ws://localhost:8080');
                this.ws.onopen = () => this.updateStatus('connected');
                this.ws.onmessage = e => this.handleMessage(e.data);
                this.ws.onclose = this.ws.onerror = () => {
                    this.updateStatus('disconnected');
                    setTimeout(() => this.connect(), 3000);
                };
            }

            updateStatus(state) {
                const colors = { connected: 'green', connecting: 'yellow', disconnected: 'red' };
                const texts = { connected: 'Connected', connecting: 'Connecting...', disconnected: 'Disconnected - Retrying...' };
                const pulse = state !== 'disconnected' ? ' animate-pulse' : '';
                
                $('#status').html(`<div class="w-3 h-3 bg-${colors[state]}-500 rounded-full${pulse}"></div><span class="text-sm font-medium text-${colors[state]}-600">${texts[state]}</span>`);
            }

            handleMessage(data) {
                if (data.includes('->') && data.toLowerCase().includes('post')) {
                    this.postTitle = data.match(/POST\s+(.+)/i)?.[1]?.trim() || 'Request';
                    this.buffer = [];
                    this.isBuffering = true;
                } else if (this.isBuffering) {
                    this.buffer.push(data);
                    if (data.includes('<-') && data.toLowerCase().includes('post')) {
                        this.renderTree();
                        this.isBuffering = false;
                    }
                }
            }

            renderTree() {
                const groups = [];
                let currentGroup = null;
                let counter = 1;
                
                this.buffer.forEach(msg => {
                    if (msg.includes('->') && /entering|exiting/i.test(msg)) {
                        const funcName = msg.match(/(?:entering|exiting)\s+(.+)/i)?.[1]?.trim() || 'Function';
                        currentGroup = { name: funcName, logs: [] };
                        groups.push(currentGroup);
                    } else if (currentGroup && !msg.includes('->') && !msg.includes('<-')) {
                        currentGroup.logs.push(msg);
                    } else if (!currentGroup) {
                        currentGroup = { name: `#${counter++}`, logs: [msg] };
                        groups.push(currentGroup);
                    }
                });

                const treeData = [{
                    id: Date.now(),
                    text: `POST ${this.postTitle}`,
                    a_attr: { class: 'post-node' },
                    state: { opened: true },
                    children: groups.map((group, i) => ({
                        id: `${Date.now()}_${i}`,
                        text: group.name,
                        a_attr: { class: 'function-node' },
                        children: group.logs.map((log, j) => ({
                            id: `${Date.now()}_${i}_${j}`,
                            text: 'logs',
                            a_attr: { class: 'log-display', 'data-log': log }
                        }))
                    }))
                }];

                $('#tree').jstree(true).settings.core.data = treeData;
                $('#tree').jstree(true).refresh();
                
                setTimeout(() => {
                    $('.log-display').each(function() {
                        $(this).closest('.jstree-node').find('.jstree-children').html(`
                            <div class="ml-6 mt-2 p-3 bg-gray-50 border border-gray-200 rounded-lg">
                                <div class="font-mono text-sm text-gray-800 whitespace-pre-wrap">${$(this).attr('data-log')}</div>
                            </div>
                        `);
                    });
                }, 50);
            }
        }

        $(() => new LogVisualizer());
    </script>
</body>
</html>
