<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced Enterprise Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/split.js/dist/split.min.js"></script>

    <style>
        body { 
            -webkit-font-smoothing: antialiased; 
            -moz-osx-font-smoothing: grayscale;
            min-width: 450px; 
        }

        .gutter { background-color: #4a5568; transition: background-color 0.2s ease, opacity 0.3s ease; }
        .gutter.gutter-horizontal { cursor: col-resize; }
        .gutter:hover { background-color: #b81830; }
        .gutter-disabled { opacity: 0; pointer-events: none; }

        .dashboard-panel { transition: width 0.5s cubic-bezier(0.4, 0, 0.2, 1); }
        .panel-content-wrapper { position: relative; flex-grow: 1; overflow: hidden; background-color: inherit; }
        .panel-view { position: absolute; inset: 0; display: flex; flex-direction: column; padding: 1rem 1rem 1rem 0rem; transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1); }
        
        .main-content-view { transform: translateX(0); padding: 0; }
        .settings-view { transform: translateX(100%); }
        .settings-active .main-content-view { transform: translateX(-100%); }
        .settings-active .settings-view { transform: translateX(0); }

        .icon { width: 1.25rem; height: 1.25rem; }
        .panel-button { display: flex; align-items: center; justify-content: center; background: none; border: 1px solid transparent; color: #d1d5db; cursor: pointer; padding: 0.25rem; border-radius: 0.25rem; transition: background-color 0.2s ease; }
        .panel-button:hover { background-color: #374151; }

        ::-webkit-scrollbar { width: 6px; height: 6px;}
        ::-webkit-scrollbar-track { background: #2d2d2d; border-radius: 3px; }
        ::-webkit-scrollbar-thumb { background: #b81830; border-radius: 3px; }
        * { scrollbar-width: thin; scrollbar-color: #b81830 #2d2d2d; }

        #logs-content-area { display: grid; align-content: start; overflow-y: scroll; overflow-x: auto; }
        .log-entry { display: flex; align-items: baseline; background-color: #0e0e0e; padding: 0.1rem 0.5rem; font-family: monospace; font-size: 0.875rem; }
        .log-entry:nth-child(even) { background-color: #111111; }
        .log-prefix { flex-shrink: 0; width: 100px; font-weight: bold; color: #b81830; margin-right: 1rem; }
        .log-message { white-space: pre; }
        
        .status-indicator-circle { width: 0.75rem; height: 0.75rem; border-radius: 9999px; transition: background-color 0.3s ease; }
        .status-connecting { background-color: #f59e0b; }
        .status-connected { background-color: #22c55e; }
        .status-disconnected { background-color: #ef4444; }

        /* --- Final styles for Call Stack Visualizer --- */
        #call-stack-flow { overflow-y: auto; overflow-x: hidden; }
        .call-stack-title { color: #9ca3af; font-weight: bold; text-transform: uppercase; font-size: 0.9rem; }
        
        /* Issue 7 Fix: Creative UI/UX redesign for function nodes */
        .call-stack-item { border: 1px solid #2d2d2d; border-radius: 6px; margin-bottom: 6px; background-color: #181818; border-left: 4px solid #b81830; cursor: pointer; transition: background-color 0.2s ease; padding: 10px; }
        .call-stack-item:hover { background-color: #2d2d2d; }
        .call-stack-header { display: flex; align-items: baseline; }
        .flow-prefix { color: #6b7280; font-weight: 600; margin-right: 0.75rem; }
        .call-stack-name { font-weight: 600; color: #e5e7eb; overflow-wrap: break-word; } /* This now works due to layout change */
        .call-stack-footer { display: flex; justify-content: flex-end; align-items: center; gap: 1rem; margin-top: 4px; }
        .call-stack-duration { color: #9ca3af; font-size: 0.8rem; flex-shrink: 0; }
        .expand-icon { transition: transform 0.2s ease; color: #6b7280; flex-shrink: 0; width: 16px; height: 16px; }
        .expand-icon.expanded { transform: rotate(90deg); }

        .call-stack-content { max-height: 0; overflow: hidden; transition: max-height 0.3s ease-out; padding-left: 28px; /* Aligns with name */ }
        .call-stack-content.expanded { max-height: 1000px; margin-top: 10px; }

        .call-stack-log { font-style: italic; color: #d1d5db; background-color: #0e0e0e; padding: 8px; border-radius: 4px; margin-bottom: 8px; overflow-wrap: break-word; white-space: pre-wrap; }
        .nested-calls { padding-left: 15px; margin-top: 8px; border-left: 2px solid #2d2d2d; }

        /* Issue 1 Fix: Meta info on one line */
        .call-stack-meta-row { display: flex; align-items: flex-start; gap: 1.5rem; margin-bottom: 1.5rem; }
        .call-stack-meta-item .meta-title { color: #9ca3af; font-size: 0.8rem; font-weight: bold; text-transform: uppercase; margin-bottom: 0.25rem; }
        .call-stack-meta-item .meta-value { color: #d1d5db; font-weight: 600; display: flex; align-items: center; gap: 0.5rem; }
        .status-circle { width: 10px; height: 10px; border-radius: 50%; }
        .status-ok { background-color: #22c55e; }
        .status-warn { background-color: #f59e0b; }
        .status-error { background-color: #ef4444; }

        /* Issue 4 Fix: Flow controls styling */
        .flow-controls { display: flex; align-items: center; justify-content: space-between; margin-bottom: 0.75rem; }
        .flow-control-buttons button { background: #2d2d2d; color: #9ca3af; border: none; padding: 0.5rem 0.75rem; font-size: 0.9rem; font-weight: bold; border-radius: 4px; cursor: pointer; transition: all 0.2s ease; text-transform: uppercase; }
        .flow-control-buttons button:hover { background: #374151; color: #e5e7eb; }

        .call-stack-nav-controls { display: flex; justify-content: space-between; margin-top: auto; padding-top: 1rem; }
        .call-stack-nav-button { background: none; border: none; color: #6b7280; font-size: 0.875rem; font-weight: 600; cursor: pointer; transition: color 0.2s ease; }
        .call-stack-nav-button:not(:disabled):hover { color: #d1d5db; }
        .call-stack-nav-button:disabled { color: #374151; cursor: not-allowed; }
    </style>
</head>
<body class="bg-[#0e0e0e] text-white h-full flex flex-col overflow-hidden">

    <header class="application-header bg-[#181818] px-3 py-2 flex items-center justify-between flex-shrink-0 z-10">
        <div class="flex items-center whitespace-nowrap"><h1 class="text-[#b81830] text-2xl font-bold">Comp</h1><span class="text-gray-400 ml-3 text-sm">Service</span></div>
        <nav class="flex-grow flex justify-end items-center"><span class="text-gray-400 mr-4 text-sm font-semibold">Pages</span><div class="flex items-center gap-2"><a href="#" class="text-white bg-[#b81830] hover:bg-[#a1152a] transition-colors px-4 py-2 rounded-md text-sm font-medium">Debugger</a></div></nav>
    </header>

    <main id="dashboard-container" class="flex-grow flex w-full overflow-hidden">

        <section id="logs-panel" class="dashboard-panel p-3 flex flex-col bg-[#181818]">
             <div class="flex justify-between items-center mb-4 flex-shrink-0">
                <div class="flex items-center gap-4"><h2 class="text-xl font-semibold whitespace-nowrap">Live Logs</h2><div class="flex items-center gap-2"><span class="text-sm text-gray-400">Websockets Status</span><div id="ws-status-indicator" class="status-indicator-circle status-connecting"></div></div></div>
                <div class="panel-controls flex items-center gap-2"><button class="settings-toggle panel-button focus:outline-none" data-panel-id="logs-panel" title="Settings"><i class="fa-solid fa-gear text-sm"></i></button><button class="reset-layout-button panel-button hidden focus:outline-none" title="Reset Size"><i class="fa-solid fa-arrows-rotate text-sm"></i></button></div>
            </div>
            <div class="panel-content-wrapper" data-panel-id="logs-panel">
                <div class="panel-view main-content-view"><div id="logs-content-area" class="flex-grow"></div></div>
                <div class="panel-view settings-view"><div class="flex justify-between items-center w-full"><h3 class="text-sm font-semibold text-gray-300">Settings</h3><button class="settings-back-button panel-button text-sm flex items-center gap-1 focus:outline-none" data-panel-id="logs-panel">‚Üê Back</button></div></div>
            </div>
        </section>

        <!-- Call Stack Panel -->
        <section id="stack-panel" class="dashboard-panel p-3 flex flex-col bg-[#0e0e0e]">
            <div class="flex justify-between items-center mb-4 flex-shrink-0"><h2 class="text-xl font-semibold whitespace-nowrap">Call Stack</h2><div class="panel-controls flex items-center gap-2"><button class="settings-toggle panel-button focus:outline-none" data-panel-id="stack-panel" title="Settings"><i class="fa-solid fa-gear text-sm"></i></button><button class="reset-layout-button panel-button hidden focus:outline-none" title="Reset Size"><i class="fa-solid fa-arrows-rotate text-sm"></i></button></div></div>
            <div class="panel-content-wrapper" data-panel-id="stack-panel">
                <div class="panel-view main-content-view p-4 pl-0 flex flex-col">
                    <h3 class="call-stack-title">Latest API Call</h3>
                    <p id="latest-api-call" class="font-mono text-gray-300 min-h-[1.5em] mb-4"></p>
                    
                    <div class="call-stack-meta-row">
                        <div class="call-stack-meta-item">
                            <div class="meta-title">Time</div>
                            <div id="api-call-time" class="meta-value">-</div>
                        </div>
                        <div class="call-stack-meta-item">
                            <div class="meta-title">STATUS</div>
                            <div id="api-call-status" class="meta-value">-</div>
                        </div>
                        <div id="api-call-error-container" class="call-stack-meta-item" style="display: none;">
                            <div class="meta-title">Error</div>
                            <div id="api-call-error" class="meta-value">-</div>
                        </div>
                    </div>

                    <div class="flow-controls">
                        <h3 class="call-stack-title">FLOW</h3>
                        <div class="flow-control-buttons">
                            <button id="expand-all-btn">EXPAND ALL</button>
                            <button id="collapse-all-btn">COLLAPSE ALL</button>
                        </div>
                    </div>
                    <div id="call-stack-flow" class="flex-grow pt-2"></div>
                    <div class="call-stack-nav-controls">
                        <button id="prev-call-btn" class="call-stack-nav-button">‚Üê Previous Call</button>
                        <button id="next-call-btn" class="call-stack-nav-button">Next Call ‚Üí</button>
                    </div>
                </div>
                <div class="panel-view settings-view"><div class="flex justify-between items-center w-full"><h3 class="text-sm font-semibold text-gray-300">Settings</h3><button class="settings-back-button panel-button text-sm flex items-center gap-1 focus:outline-none" data-panel-id="stack-panel">‚Üê Back</button></div></div>
            </div>
        </section>
    </main>

    <script>
        class LogStreamManager {
            constructor(url, callbacks) { this.url = url; this.websocket = null; this.callbacks = callbacks; }
            connect() { this.websocket = new WebSocket(this.url); this.websocket.onopen = () => this.callbacks.onOpen(); this.websocket.onmessage = (event) => this.callbacks.onMessage(event.data); this.websocket.onerror = (error) => this.callbacks.onError(error); this.websocket.onclose = () => this.callbacks.onClose(); }
        }

        class DashboardManager {
            constructor() {
                this.elements = {
                    container: document.getElementById('dashboard-container'),
                    panels: document.querySelectorAll('.dashboard-panel'),
                    resetButtons: document.querySelectorAll('.reset-layout-button'),
                    logsContentArea: document.getElementById('logs-content-area'),
                    statusIndicator: document.getElementById('ws-status-indicator'),
                    latestApiCall: document.getElementById('latest-api-call'),
                    apiCallTime: document.getElementById('api-call-time'),
                    apiCallStatus: document.getElementById('api-call-status'),
                    apiCallError: document.getElementById('api-call-error'),
                    apiCallErrorContainer: document.getElementById('api-call-error-container'),
                    callStackFlow: document.getElementById('call-stack-flow'),
                    prevCallBtn: document.getElementById('prev-call-btn'),
                    nextCallBtn: document.getElementById('next-call-btn'),
                    expandAllBtn: document.getElementById('expand-all-btn'),
                    collapseAllBtn: document.getElementById('collapse-all-btn'),
                    gutter: null,
                };

                this.state = { isLayoutCustomized: false, isInsidePostBlock: false, isLogAreaCleared: true, postMessageBuffer: [], postRequestCounter: 0, postHistory: [], currentHistoryIndex: -1, };
                this.MAX_HISTORY = 10; this.DEFAULT_SIZES = [65, 35]; this.MIN_CONTAINER_WIDTH = 700;

                this.splitInstance = Split(['#logs-panel', '#stack-panel'], { sizes: this.DEFAULT_SIZES, minSize: 320, gutterSize: 8, onDragStart: () => this.elements.panels.forEach(p => p.classList.remove('dashboard-panel')), onDrag: () => this.checkLayout(), onDragEnd: () => this.elements.panels.forEach(p => p.classList.add('dashboard-panel')), });
                this.logStream = new LogStreamManager("ws://127.0.0.1:8000/ws/logs", { onOpen: this.onWsOpen.bind(this), onMessage: this.handleLogMessage.bind(this), onClose: this.onWsClose.bind(this), onError: this.onWsError.bind(this), });
                this.initialize();
            }

            initialize() {
                this.elements.gutter = this.elements.container.querySelector('.gutter');
                this.elements.container.addEventListener('click', this.handleDelegatedClick.bind(this));
                new ResizeObserver(entries => this.handleResize(entries[0].contentRect.width)).observe(this.elements.container);
                this.handleResize(this.elements.container.clientWidth);
                this.displaySystemMessage("CONNECTING...");
                this.logStream.connect();
                this.updateNavigationButtons();
            }
            
            onWsOpen() { this.elements.statusIndicator.className = 'status-indicator-circle status-connected'; this.displaySystemMessage("CONNECTION ESTABLISHED. WAITING FOR LOGS..."); }
            onWsClose() { this.elements.statusIndicator.className = 'status-indicator-circle status-disconnected'; this.displaySystemMessage("CONNECTION CLOSED. AWAITING CONNECTION..."); }
            onWsError(error) { console.error("WebSocket Error:", error); this.elements.statusIndicator.className = 'status-indicator-circle status-disconnected'; this.displaySystemMessage("CONNECTION FAILED. PLEASE CHECK THE SERVER."); }

            handleLogMessage(message) {
                if (this.state.isLogAreaCleared) { this.elements.logsContentArea.innerHTML = ''; this.state.isLogAreaCleared = false; }
                if (message.includes("-> POST")) { this.state.isInsidePostBlock = true; this.state.postMessageBuffer.push(message); } 
                else if (message.includes("<- POST")) {
                    this.state.postMessageBuffer.push(message);
                    this.state.postRequestCounter++;
                    const title = `POST #${this.state.postRequestCounter}`;
                    this.state.postMessageBuffer.forEach(logLine => this.renderLogEntry(title, logLine));
                    this.processPostBlock();
                    this.state.isInsidePostBlock = false; this.state.postMessageBuffer = [];
                } else {
                    if (this.state.isInsidePostBlock) { this.state.postMessageBuffer.push(message); } 
                    else { this.renderLogEntry("Raw Log", message); }
                }
            }
            
            processPostBlock() {
                const callData = this.parseLogsToCallStack(this.state.postMessageBuffer);
                if (!callData) return;
                this.state.postHistory.push(callData);
                if (this.state.postHistory.length > this.MAX_HISTORY) { this.state.postHistory.shift(); }
                this.state.currentHistoryIndex = this.state.postHistory.length - 1;
                this.displayCallForHistoryIndex(this.state.currentHistoryIndex);
            }

            parseLogsToCallStack(logBuffer) {
                const apiCallMatch = logBuffer[0].match(/POST (\/\S+)/);
                if (!apiCallMatch) return null;
                const root = { name: 'POST Request', children: [], logs: [], duration: 'N/A' };
                const stack = [root];
                logBuffer.forEach(log => {
                    let match; const currentNode = stack[stack.length - 1];
                    if ((match = log.match(/-> Entering: (.*)/))) { const newNode = { name: match[1], children: [], logs: [], duration: 'N/A' }; currentNode.children.push(newNode); stack.push(newNode); } 
                    else if ((match = log.match(/<- Exiting: .* - (.*s)/))) { if (stack.length > 1) { const exitingNode = stack.pop(); exitingNode.duration = match[1] || 'N/A'; } } 
                    else if ((match = log.match(/<- POST .* - (\d+) - (.*s)/))) { root.statusCode = match[1] || 'N/A'; root.duration = match[2] || 'N/A'; } 
                    else if ((match = log.match(/\| ERROR \| (.*)/))) { root.error = match[1].trim(); currentNode.logs.push(log); }
                    else if (!log.includes("-> POST")) { currentNode.logs.push(log); }
                });
                return { apiCall: apiCallMatch[1], callStack: root };
            }

            displayCallForHistoryIndex(index) {
                const callData = this.state.postHistory[index];
                if (!callData) return;
                this.elements.latestApiCall.textContent = callData.apiCall;
                this.elements.apiCallTime.textContent = callData.callStack.duration;
                
                const status = callData.callStack.statusCode;
                let statusClass = 'status-warn';
                if (status >= 200 && status < 300) statusClass = 'status-ok';
                if (status >= 500) statusClass = 'status-error';
                this.elements.apiCallStatus.innerHTML = `<div class="status-circle ${statusClass}"></div> ${status}`;

                if (callData.callStack.error) {
                    this.elements.apiCallError.textContent = callData.callStack.error;
                    this.elements.apiCallErrorContainer.style.display = 'block';
                } else {
                    this.elements.apiCallErrorContainer.style.display = 'none';
                }

                this.elements.callStackFlow.innerHTML = '';
                if (callData.callStack) {
                    callData.callStack.children.forEach((childNode, i) => {
                        const stackElement = this.renderCallStackNode(childNode, `${i + 1}.`);
                        this.elements.callStackFlow.appendChild(stackElement);
                    });
                     callData.callStack.logs.filter(log => !log.includes("| ERROR |")).forEach(log => {
                        const logElement = document.createElement('div');
                        logElement.className = 'call-stack-log';
                        logElement.textContent = `[TOP LEVEL] ${log}`;
                        this.elements.callStackFlow.appendChild(logElement);
                    });
                }
                this.updateNavigationButtons();
            }
            
            renderCallStackNode(node, prefix) {
                const hasContent = node.logs.length > 0 || node.children.length > 0;
                const itemDiv = document.createElement('div');
                itemDiv.className = 'call-stack-item';
                
                // Issue 6 & 7 Fix: New SVG icon and redesigned stacked layout
                itemDiv.innerHTML = `
                    <div class="call-stack-header">
                        <span class="flow-prefix">${prefix}</span>
                        <span class="call-stack-name">${node.name}</span>
                    </div>
                    <div class="call-stack-footer">
                        <span class="call-stack-duration">${node.duration}</span>
                        ${hasContent ? `<svg class="expand-icon" viewBox="0 0 16 16" fill="currentColor"><path d="M6 4l4 4-4 4"></path></svg>` : ''}
                    </div>
                `;

                if (hasContent) {
                    const contentDiv = document.createElement('div');
                    contentDiv.className = 'call-stack-content';
                    node.logs.forEach(log => { const logDiv = document.createElement('div'); logDiv.className = 'call-stack-log'; logDiv.textContent = log; contentDiv.appendChild(logDiv); });
                    if (node.children.length > 0) {
                        const nestedDiv = document.createElement('div');
                        nestedDiv.className = 'nested-calls';
                        node.children.forEach((child, i) => nestedDiv.appendChild(this.renderCallStackNode(child, `${prefix}${i + 1}.`)));
                        contentDiv.appendChild(nestedDiv);
                    }
                    itemDiv.appendChild(contentDiv);
                    itemDiv.addEventListener('click', (e) => {
                        e.stopPropagation();
                        contentDiv.classList.toggle('expanded');
                        itemDiv.querySelector('.expand-icon')?.classList.toggle('expanded');
                    });
                }
                return itemDiv;
            }

            updateNavigationButtons() { const { prevCallBtn, nextCallBtn } = this.elements; const { currentHistoryIndex, postHistory } = this.state; prevCallBtn.disabled = currentHistoryIndex <= 0; nextCallBtn.disabled = currentHistoryIndex >= postHistory.length - 1; }
            displaySystemMessage(message) { this.elements.logsContentArea.innerHTML = `<div class="flex items-center justify-center h-full p-4"><p class="text-2xl font-bold text-gray-500">${message}</p></div>`; this.state.isLogAreaCleared = true; }
            renderLogEntry(prefix, message) { const entry = document.createElement('div'); entry.className = 'log-entry'; entry.innerHTML = `<span class="log-prefix">${prefix}</span><span class="log-message">${message}</span>`; this.elements.logsContentArea.appendChild(entry); this.elements.logsContentArea.scrollTop = this.elements.logsContentArea.scrollHeight; }

            handleDelegatedClick(event) {
                const button = event.target.closest('button');
                if (!button) return;
                switch(button.id) {
                    case 'prev-call-btn': if (this.state.currentHistoryIndex > 0) { this.state.currentHistoryIndex--; this.displayCallForHistoryIndex(this.state.currentHistoryIndex); } break;
                    case 'next-call-btn': if (this.state.currentHistoryIndex < this.state.postHistory.length - 1) { this.state.currentHistoryIndex++; this.displayCallForHistoryIndex(this.state.currentHistoryIndex); } break;
                    case 'expand-all-btn': this.toggleAllFlowNodes(true); break;
                    case 'collapse-all-btn': this.toggleAllFlowNodes(false); break;
                }
                const actionMap = { 'reset-layout-button': () => this.resetLayout(), 'settings-toggle': () => this.toggleSettingsView(button), 'settings-back-button': () => this.toggleSettingsView(button) };
                for (const className in actionMap) { if (button.classList.contains(className)) { actionMap[className](); break; } }
            }

            toggleAllFlowNodes(expand) {
                const contentNodes = this.elements.callStackFlow.querySelectorAll('.call-stack-content');
                const iconNodes = this.elements.callStackFlow.querySelectorAll('.expand-icon');
                contentNodes.forEach(node => node.classList.toggle('expanded', expand));
                iconNodes.forEach(node => node.classList.toggle('expanded', expand));
            }

            checkLayout() { const currentSizes = this.splitInstance.getSizes(); const needsReset = Math.abs(currentSizes[0] - this.DEFAULT_SIZES[0]) > 1; if (needsReset !== this.state.isLayoutCustomized) { this.state.isLayoutCustomized = needsReset; this.elements.resetButtons.forEach(btn => btn.classList.toggle('hidden', !needsReset)); } }
            handleResize(width) { if (width < this.MIN_CONTAINER_WIDTH) { if (!this.elements.gutter.classList.contains('gutter-disabled')) { this.elements.gutter.classList.add('gutter-disabled'); this.resetLayout(); } } else { this.elements.gutter.classList.remove('gutter-disabled'); } }
            resetLayout() { this.elements.panels.forEach(p => p.classList.add('dashboard-panel')); this.splitInstance.setSizes(this.DEFAULT_SIZES); this.state.isLayoutCustomized = false; this.elements.resetButtons.forEach(btn => btn.classList.add('hidden')); }
            toggleSettingsView(button) { const panelId = button.dataset.panelId; const wrapper = document.querySelector(`.panel-content-wrapper[data-panel-id="${panelId}"]`); if (wrapper) wrapper.classList.toggle('settings-active'); }
        }

        document.addEventListener('DOMContentLoaded', () => new DashboardManager());
    </script>
</body>
</html>
