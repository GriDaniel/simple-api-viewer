<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced Enterprise Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdn.tailwindcss.com"></script>

    <style>
        body { -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; min-width: 450px; }
        .gutter { background-color: #4a5568; transition: background-color 0.2s ease, opacity 0.3s ease; cursor: col-resize; }
        .gutter:hover { background-color: #b81830; }
        .gutter-disabled { opacity: 0; pointer-events: none; }
        .dashboard-panel { transition: width 0.5s cubic-bezier(0.4, 0, 0.2, 1); }
        .panel-content-wrapper { position: relative; flex-grow: 1; overflow: hidden; background-color: inherit; }
        .panel-view { position: absolute; inset: 0; display: flex; flex-direction: column; padding: 1rem 1rem 1rem 0rem; transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1); }
        .main-content-view { transform: translateX(0); padding: 0; }
        .settings-view { transform: translateX(100%); }
        .settings-active .main-content-view { transform: translateX(-100%); }
        .settings-active .settings-view { transform: translateX(0); }
        .icon { width: 1.25rem; height: 1.25rem; }
        .panel-button { display: flex; align-items: center; justify-content: center; background: none; border: 1px solid transparent; color: #d1d5db; cursor: pointer; padding: 0.25rem; border-radius: 0.25rem; transition: background-color 0.2s ease; }
        .panel-button:hover { background-color: #374151; }
        ::-webkit-scrollbar { width: 6px; height: 6px;}
        ::-webkit-scrollbar-track { background: #2d2d2d; border-radius: 3px; }
        ::-webkit-scrollbar-thumb { background: #b81830; border-radius: 3px; }
        * { scrollbar-width: thin; scrollbar-color: #b81830 #2d2d2d; }
        #logs-content-area { display: grid; align-content: start; overflow-y: scroll; overflow-x: auto; }
        .log-entry { display: flex; align-items: baseline; background-color: #0e0e0e; padding: 0.1rem 0.5rem; font-family: monospace; font-size: 0.875rem; }
        .log-entry:nth-child(even) { background-color: #111111; }
        .log-prefix { flex-shrink: 0; width: 100px; font-weight: bold; color: #b81830; margin-right: 1rem; }
        .log-message { white-space: pre; }
        .status-indicator-circle { width: 0.75rem; height: 0.75rem; border-radius: 9999px; transition: background-color 0.3s ease; }
        .status-connecting { background-color: #f59e0b; }
        .status-connected { background-color: #22c55e; }
        .status-disconnected { background-color: #ef4444; }
        #call-stack-flow { overflow-y: auto; overflow-x: hidden; }
        .call-stack-title { color: #9ca3af; font-weight: bold; text-transform: uppercase; font-size: 16px; }
        .call-stack-item { border: 1px solid #2d2d2d; border-radius: 8px; margin-bottom: 8px; background-color: #181818; border-left: 4px solid #b81830; cursor: pointer; transition: all 0.2s ease; padding: 12px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);}
        .call-stack-item:hover { background-color: #202020; border-left-color: #d1263a; transform: translateY(-1px); box-shadow: 0 4px 8px rgba(0, 0, 0, 0.4);}
        .call-stack-header { display: flex; align-items: flex-start; gap: 0.75rem; margin-bottom: 6px; }
        .flow-prefix { color: #6b7280; font-weight: 700; flex-shrink: 0; background-color: #2d2d2d; padding: 2px 6px; border-radius: 4px; font-size: 0.75rem; min-width: 24px; text-align: center; }
        .call-stack-name { font-weight: 600; color: #e5e7eb; flex: 1; line-height: 1.4; font-size: 14px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; display: block; }
        .call-stack-footer { display: flex; justify-content: flex-end; align-items: center; gap: 1rem; }
        .call-stack-duration { font-size: 0.8rem; flex-shrink: 0; font-weight: 600; padding: 2px 6px; border-radius: 4px; background-color: rgba(34, 197, 94, 0.1); color: #22c55e; }
        .call-stack-duration.duration-error { background-color: rgba(239, 68, 68, 0.15); color: #ef4444; }
        .expand-icon { transition: transform 0.3s ease-out; color: #9ca3af; flex-shrink: 0; width: 16px; height: 16px; }
        .expand-icon.expanded { transform: rotate(90deg); }
        .call-stack-content { display: grid; grid-template-rows: 0fr; transition: grid-template-rows 0.35s ease-out, margin-top 0.35s ease-out; }
        .call-stack-content > div { overflow: hidden; }
        .call-stack-content.expanded { grid-template-rows: 1fr; margin-top: 8px; }
        .call-stack-logs-section { background-color: #0a0a0a; border: 1px solid #2d2d2d; border-radius: 6px; padding: 8px; margin-bottom: 12px; }
        .call-stack-logs-title { color: #9ca3af; font-size: 0.8rem; font-weight: 700; text-transform: uppercase; margin-bottom: 6px; padding-bottom: 4px; border-bottom: 1px solid #2d2d2d; letter-spacing: 0.5px; }
        .call-stack-log { font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace; font-size: 0.75rem; color: #d1d5db; background-color: #111111; padding: 6px 8px; border-radius: 4px; margin-bottom: 4px; overflow-wrap: break-word; white-space: pre-wrap; border-left: 2px solid #374151; line-height: 1.3; }
        .call-stack-log:last-child { margin-bottom: 0; }
        .nested-calls { padding-left: 20px; margin-top: 12px; border-left: 3px solid #374151; position: relative; }
        .nested-calls::before { content: ''; position: absolute; left: -3px; top: 0; bottom: 0; width: 3px; background: linear-gradient(to bottom, #b81830, #6b7280); border-radius: 2px; }
        .nested-calls .call-stack-item { background-color: #151515; border-left-color: #6b7280; margin-bottom: 6px; }
        .nested-calls .call-stack-item:hover { background-color: #1a1a1a; }
        .call-stack-meta-row { display: flex; align-items: flex-start; gap: 1.5rem; margin-bottom: 1.5rem; }
        .call-stack-meta-item .meta-title { color: #9ca3af; font-size: 16px; font-weight: bold; text-transform: uppercase; margin-bottom: 0.25rem; }
        .call-stack-meta-item .meta-value { color: #d1d5db; font-weight: 600; display: flex; align-items: center; gap: 0.5rem; font-size: 14px; }
        #latest-api-call { font-size: 14px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
        .status-circle { width: 10px; height: 10px; border-radius: 50%; }
        .status-ok { background-color: #22c55e; }
        .status-warn { background-color: #f59e0b; }
        .status-error { background-color: #ef4444; }
        .flow-controls { display: flex; align-items: center; justify-content: space-between; margin-bottom: 0.75rem; position: sticky; top: 0; z-index: 10; background-color: #0e0e0e; padding-bottom: 0.5rem; }
        .flow-control-buttons { display: flex; gap: 0.5rem; }
        .flow-control-buttons button { background: #2d2d2d; color: #9ca3af; border: none; padding: 0.375rem 0.625rem; font-size: 0.8rem; font-weight: 600; border-radius: 4px; cursor: pointer; transition: all 0.15s ease; text-transform: uppercase; min-width: auto; }
        .flow-control-buttons button:hover { background: #374151; color: #e5e7eb; transform: translateY(-1px); }
        .call-stack-nav-controls { display: flex; justify-content: space-between; margin-top: auto; padding-top: 1rem; }
        .call-stack-nav-button { background: none; border: none; color: #6b7280; font-size: 0.875rem; font-weight: 600; cursor: pointer; transition: color 0.2s ease; }
        .call-stack-nav-button:not(:disabled):hover { color: #d1d5db; }
        .call-stack-nav-button:disabled { color: #374151; cursor: not-allowed; }
        #custom-tooltip { position: fixed; display: none; background-color: #1f2937; color: white; padding: 8px 12px; border-radius: 6px; font-size: 14px; z-index: 1000; pointer-events: none; max-width: 400px; text-align: center; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4); border: 1px solid #374151; }
        #custom-tooltip::after { content: ''; position: absolute; top: 100%; left: 50%; transform: translateX(-50%); width: 0; height: 0; border-left: 6px solid transparent; border-right: 6px solid transparent; border-top: 6px solid #1f2937; }
    </style>
</head>
<body class="bg-[#0e0e0e] text-white h-full flex flex-col overflow-hidden">

    <header class="application-header bg-[#181818] px-3 py-2 flex items-center justify-between flex-shrink-0 z-10">
        <div class="flex items-center whitespace-nowrap"><h1 class="text-[#b81830] text-2xl font-bold">Comp</h1><span class="text-gray-400 ml-3 text-sm">Service</span></div>
        <nav class="flex-grow flex justify-end items-center"><span class="text-gray-400 mr-4 text-sm font-semibold">Pages</span><div class="flex items-center gap-2"><a href="#" class="text-white bg-[#b81830] hover:bg-[#a1152a] transition-colors px-4 py-2 rounded-md text-sm font-medium">Debugger</a></div></nav>
    </header>

    <main id="dashboard-container" class="flex-grow flex w-full overflow-hidden">
        <section id="logs-panel" class="dashboard-panel p-3 flex flex-col bg-[#181818]">
            <div class="flex justify-between items-center mb-4 flex-shrink-0">
                <div class="flex items-center gap-4"><h2 class="text-xl font-semibold whitespace-nowrap">Live Logs</h2><div class="flex items-center gap-2"><span class="text-sm text-gray-400">Websockets Status</span><div id="ws-status-indicator" class="status-indicator-circle status-connecting"></div></div></div>
                <div class="panel-controls flex items-center gap-2"><button class="settings-toggle panel-button focus:outline-none" data-panel-id="logs-panel" title="Settings"><i class="fa-solid fa-gear text-sm"></i></button><button class="reset-layout-button panel-button hidden focus:outline-none" title="Reset Size"><i class="fa-solid fa-arrows-rotate text-sm"></i></button></div>
            </div>
            <div class="panel-content-wrapper" data-panel-id="logs-panel">
                <div class="panel-view main-content-view"><div id="logs-content-area" class="flex-grow"></div></div>
                <div class="panel-view settings-view"><div class="flex justify-between items-center w-full"><h3 class="text-sm font-semibold text-gray-300">Settings</h3><button class="settings-back-button panel-button text-sm flex items-center gap-1 focus:outline-none" data-panel-id="logs-panel">← Back</button></div></div>
            </div>
        </section>

        <section id="stack-panel" class="dashboard-panel p-3 flex flex-col bg-[#0e0e0e]">
            <div class="flex justify-between items-center mb-4 flex-shrink-0"><h2 class="text-xl font-semibold whitespace-nowrap">Call Stack</h2><div class="panel-controls flex items-center gap-2"><button class="settings-toggle panel-button focus:outline-none" data-panel-id="stack-panel" title="Settings"><i class="fa-solid fa-gear text-sm"></i></button><button class="reset-layout-button panel-button hidden focus:outline-none" title="Reset Size"><i class="fa-solid fa-arrows-rotate text-sm"></i></button></div></div>
            <div class="panel-content-wrapper" data-panel-id="stack-panel">
                <div class="panel-view main-content-view p-4 pl-0 flex flex-col">
                    <h3 class="call-stack-title">Latest API Call</h3>
                    <p id="latest-api-call" class="font-mono text-gray-300 min-h-[1.5em] mb-4"></p>
                    <div class="call-stack-meta-row">
                        <div class="call-stack-meta-item"><div class="meta-title">Time</div><div id="api-call-time" class="meta-value">-</div></div>
                        <div class="call-stack-meta-item"><div class="meta-title">STATUS</div><div id="api-call-status" class="meta-value">-</div></div>
                        <div id="api-call-error-container" class="call-stack-meta-item" style="display: none;"><div class="meta-title">Error</div><div id="api-call-error" class="meta-value">-</div></div>
                    </div>
                    <div class="flow-controls">
                        <h3 class="call-stack-title">FLOW</h3>
                        <div class="flow-control-buttons"><button id="expand-all-btn">EXPAND ALL</button><button id="collapse-all-btn">COLLAPSE ALL</button></div>
                    </div>
                    <div id="call-stack-flow" class="flex-grow pt-2"></div>
                    <div class="call-stack-nav-controls"><button id="prev-call-btn" class="call-stack-nav-button">← Previous Call</button><button id="next-call-btn" class="call-stack-nav-button">Next Call →</button></div>
                </div>
                <div class="panel-view settings-view"><div class="flex justify-between items-center w-full"><h3 class="text-sm font-semibold text-gray-300">Settings</h3><button class="settings-back-button panel-button text-sm flex items-center gap-1 focus:outline-none" data-panel-id="stack-panel">← Back</button></div></div>
            </div>
        </section>
    </main>

    <div id="custom-tooltip" role="tooltip"></div>

    <script>
        class SplitPane {
            constructor(elements, options = {}) {
                this.elements = elements.map(el => typeof el === 'string' ? document.querySelector(el) : el);
                this.sizes = options.sizes || [50, 50];
                this.minSize = options.minSize || 100;
                this.gutterSize = options.gutterSize || 8;
                this.onDrag = options.onDrag || (() => {});
                this.isDragging = false;
                this.init();
            }

            init() {
                const container = this.elements[0].parentElement;
                const gutter = document.createElement('div');
                gutter.className = 'gutter';
                gutter.style.width = `${this.gutterSize}px`;
                
                container.insertBefore(gutter, this.elements[1]);
                this.gutter = gutter;
                this.container = container;
                
                this.setSizes(this.sizes);
                this.attachEvents();
            }

            attachEvents() {
                this.gutter.addEventListener('mousedown', this.startDrag.bind(this));
                document.addEventListener('mousemove', this.drag.bind(this));
                document.addEventListener('mouseup', this.endDrag.bind(this));
            }

            startDrag(e) {
                e.preventDefault();
                this.isDragging = true;
                this.startX = e.clientX;
                this.startWidths = this.elements.map(el => el.offsetWidth);
                document.body.style.cursor = 'col-resize';
                document.body.style.userSelect = 'none';
            }

            drag(e) {
                if (!this.isDragging) return;
                
                const deltaX = e.clientX - this.startX;
                const containerWidth = this.container.offsetWidth - this.gutterSize;
                
                const newWidth1 = this.startWidths[0] + deltaX;
                const newWidth2 = this.startWidths[1] - deltaX;
                
                if (newWidth1 >= this.minSize && newWidth2 >= this.minSize) {
                    const newSize1 = (newWidth1 / containerWidth) * 100;
                    const newSize2 = (newWidth2 / containerWidth) * 100;
                    this.setSizes([newSize1, newSize2]);
                    this.onDrag();
                }
            }

            endDrag() {
                this.isDragging = false;
                document.body.style.cursor = '';
                document.body.style.userSelect = '';
            }

            setSizes(sizes) {
                this.sizes = sizes;
                this.elements[0].style.width = `${sizes[0]}%`;
                this.elements[1].style.width = `${sizes[1]}%`;
            }

            getSizes() {
                return this.sizes;
            }
        }

        class DashboardManager {
            constructor() {
                this.config = { maxHistory: 10, defaultSizes: [65, 35], websocketUrl: "ws://127.0.0.1:8000/ws/logs" };
                this.state = { postHistory: [], currentHistoryIndex: -1, postRequestCounter: 0, postMessageBuffer: [], isInsidePostBlock: false, isLogAreaCleared: true };
                this.elements = new Map([
                    ['container', document.getElementById('dashboard-container')], ['logsArea', document.getElementById('logs-content-area')],
                    ['statusIndicator', document.getElementById('ws-status-indicator')], ['latestApiCall', document.getElementById('latest-api-call')],
                    ['apiCallTime', document.getElementById('api-call-time')], ['apiCallStatus', document.getElementById('api-call-status')],
                    ['apiCallError', document.getElementById('api-call-error')], ['apiCallErrorContainer', document.getElementById('api-call-error-container')],
                    ['callStackFlow', document.getElementById('call-stack-flow')], ['prevCallBtn', document.getElementById('prev-call-btn')],
                    ['nextCallBtn', document.getElementById('next-call-btn')], ['tooltip', document.getElementById('custom-tooltip')]
                ]);
                this.tooltipTimeout = null;
                this.init();
            }

            init() {
                this.setupSplitLayout();
                this.setupEventListeners();
                this.setupResizeObserver();
                this.connectWebSocket();
                this.displaySystemMessage("CONNECTING...");
                this.updateNavButtons();
            }

            setupSplitLayout() {
                this.splitInstance = new SplitPane(['#logs-panel', '#stack-panel'], { 
                    sizes: this.config.defaultSizes, 
                    minSize: 320, 
                    gutterSize: 8, 
                    onDrag: () => this.checkLayout() 
                });
            }

            setupEventListeners() {
                const container = this.elements.get('container');
                container.addEventListener('click', this.handleClick.bind(this));
                
                // Enhanced tooltip events with better detection
                document.addEventListener('mouseover', this.handleTooltipShow.bind(this));
                document.addEventListener('mouseout', this.handleTooltipHide.bind(this));
                document.addEventListener('mousemove', this.handleTooltipMove.bind(this));
            }

            setupResizeObserver() {
                const container = this.elements.get('container');
                new ResizeObserver(entries => {
                    const width = entries[0].contentRect.width;
                    const gutter = container.querySelector('.gutter');
                    if (gutter) {
                        gutter.classList.toggle('gutter-disabled', width < 700);
                    }
                    if (width < 700) this.resetLayout();
                }).observe(container);
            }

            connectWebSocket() {
                this.websocket = new WebSocket(this.config.websocketUrl);
                this.websocket.onopen = () => this.updateConnectionStatus('connected', "CONNECTION ESTABLISHED. WAITING FOR LOGS...");
                this.websocket.onmessage = (event) => this.handleWebSocketMessage(event.data);
                this.websocket.onclose = () => this.updateConnectionStatus('disconnected', "CONNECTION CLOSED. AWAITING CONNECTION...");
                this.websocket.onerror = () => this.updateConnectionStatus('disconnected', "CONNECTION FAILED. PLEASE CHECK THE SERVER.");
            }
            
            updateConnectionStatus(status, message) {
                this.elements.get('statusIndicator').className = `status-indicator-circle status-${status}`;
                this.displaySystemMessage(message);
            }

            handleWebSocketMessage(message) {
                if (this.state.isLogAreaCleared) { this.elements.get('logsArea').innerHTML = ''; this.state.isLogAreaCleared = false; }
                if (message.includes("-> POST")) { this.state.isInsidePostBlock = true; this.state.postMessageBuffer = [message]; }
                else if (message.includes("<- POST")) { this.state.postMessageBuffer.push(message); this.processPostBlock(); this.state.isInsidePostBlock = false; }
                else { this.state.isInsidePostBlock ? this.state.postMessageBuffer.push(message) : this.renderLogEntry("Raw Log", message); }
            }

            processPostBlock() {
                const title = `POST #${++this.state.postRequestCounter}`;
                this.state.postMessageBuffer.forEach(log => this.renderLogEntry(title, log));
                const callData = this.parseCallStack(this.state.postMessageBuffer);
                if (callData) {
                    this.state.postHistory.push(callData);
                    if (this.state.postHistory.length > this.config.maxHistory) this.state.postHistory.shift();
                    this.state.currentHistoryIndex = this.state.postHistory.length - 1;
                    this.displayCall(this.state.currentHistoryIndex);
                }
            }

            parseCallStack(logs) {
                const apiMatch = logs[0].match(/POST (\/\S+)/);
                if (!apiMatch) return null;
                const root = { name: 'POST Request', children: [], logs: [], duration: 'N/A', hasError: false };
                const stack = [root];
                logs.forEach(log => {
                    const current = stack[stack.length - 1];
                    let match;
                    if (log.includes("Raised")) current.hasError = true;
                    if ((match = log.match(/-> Entering: (.*)/))) {
                        const newNode = { name: match[1], children: [], logs: [], duration: 'N/A', hasError: false };
                        current.children.push(newNode);
                        stack.push(newNode);
                    } else if ((match = log.match(/<- Exiting: .* - (.*s)/))) {
                        if (stack.length > 1) { const exitedNode = stack.pop(); exitedNode.duration = match[1] || 'N/A'; if (exitedNode.hasError) stack[stack.length - 1].hasError = true; }
                    } else if ((match = log.match(/<- POST .* - (\d+) - (.*s)/))) { [root.statusCode, root.duration] = [match[1], match[2]];
                    } else if ((match = log.match(/\| ERROR \| (.*)/))) {
                        const errorParts = match[1].split(': ');
                        root.error = (errorParts.length > 1 ? errorParts.slice(1).join(': ') : match[1]).trim();
                        current.logs.push(log);
                    } else if (!log.includes("-> POST")) { current.logs.push(log); }
                });
                return { apiCall: apiMatch[1], callStack: root };
            }

            displayCall(index) {
                const data = this.state.postHistory[index];
                if (!data) return;
                const apiCallEl = this.elements.get('latestApiCall');
                apiCallEl.textContent = data.apiCall;
                apiCallEl.dataset.fullText = data.apiCall;
                this.elements.get('apiCallTime').textContent = data.callStack.duration;
                const status = data.callStack.statusCode;
                const statusClass = status >= 500 ? 'status-error' : (status >= 200 && status < 300) ? 'status-ok' : 'status-warn';
                this.elements.get('apiCallStatus').innerHTML = `<div class="status-circle ${statusClass}"></div> ${status}`;
                this.elements.get('apiCallErrorContainer').style.display = data.callStack.error ? 'block' : 'none';
                this.elements.get('apiCallError').textContent = data.callStack.error || '-';
                this.renderCallStack(data.callStack);
                this.updateNavButtons();
            }

            renderCallStack(stack) {
                const flow = this.elements.get('callStackFlow');
                flow.innerHTML = '';
                const fragment = document.createDocumentFragment();
                stack.children.forEach((node, i) => fragment.appendChild(this.createCallNode(node, `${i + 1}.`)));
                const topLogs = stack.logs.filter(log => !log.includes("| ERROR |"));
                if (topLogs.length > 0) fragment.appendChild(this.createLogsSection(topLogs, `Top Level Logs (${topLogs.length})`));
                flow.appendChild(fragment);
            }
            
            createCallNode(node, prefix) {
                const hasContent = node.logs.length > 0 || node.children.length > 0;
                const div = document.createElement('div');
                div.className = 'call-stack-item';
                div.innerHTML = `
                    <div class="call-stack-header">
                        <span class="flow-prefix">${prefix}</span>
                        <span class="call-stack-name" data-full-text="${node.name}">${node.name}</span>
                    </div>
                    <div class="call-stack-footer">
                        <span class="call-stack-duration ${node.hasError ? 'duration-error' : ''}">${node.duration}</span>
                        ${hasContent ? '<svg class="expand-icon" viewBox="0 0 16 16" fill="currentColor"><path d="M6 4l4 4-4 4"></path></svg>' : ''}
                    </div>`;
                if (hasContent) {
                    const content = document.createElement('div');
                    content.className = 'call-stack-content';
                    const wrapper = document.createElement('div');
                    if (node.logs.length > 0) wrapper.appendChild(this.createLogsSection(node.logs, `Logs (${node.logs.length})`));
                    if (node.children.length > 0) {
                        const nested = document.createElement('div');
                        nested.className = 'nested-calls';
                        node.children.forEach((child, i) => nested.appendChild(this.createCallNode(child, `${prefix}${i + 1}.`)));
                        wrapper.appendChild(nested);
                    }
                    content.appendChild(wrapper);
                    div.appendChild(content);
                }
                return div;
