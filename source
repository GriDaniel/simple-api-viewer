<!DOCTYPE html>
<html lang="en" class="bg-gray-100 font-sans">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebSocket Log Visualizer</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Lightweight and dependency-free library for rendering tree views -->
    <script src="https://unpkg.com/tree-view-js/dist/tree-view.min.js"></script>
    <style>
        :root {
            --brand-color: #2563eb;
            --status-connected: #22c55e;
            --status-connecting: #f59e0b;
            --status-disconnected: #ef4444;
        }
        .log-tree { --tree-view-arrow-color: #94a3b8; }
        .log-tree .tree-view-item-name { font-weight: 500; }
        .log-tree .tree-view-item { padding-top: 0.5rem; padding-bottom: 0.5rem; }
        .log-entry {
            background-color: #f8fafc;
            border-left: 3px solid #e2e8f0;
            padding: 0.75rem 1rem;
            font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
            font-size: 0.875rem;
            color: #334155;
            white-space: pre-wrap;
            word-break: break-word;
            margin-top: 0.5rem;
        }
    </style>
</head>
<body class="text-gray-800">
    <div class="max-w-5xl mx-auto p-4 md:p-6">
        <header class="bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-6">
            <div class="flex items-center justify-between">
                <div id="status" class="flex items-center space-x-3">
                    <div class="w-3 h-3 rounded-full"></div>
                    <span class="text-sm font-medium"></span>
                </div>
                <h1 class="text-lg font-semibold text-gray-600">WebSocket Log Visualizer</h1>
            </div>
        </header>

        <main id="log-container" class="space-y-4"></main>
    </div>

    <script>
        class LogVisualizer {
            constructor() {
                this.logContainer = document.getElementById('log-container');
                this.statusEl = document.getElementById('status');
                this.connect();
            }

            connect() {
                this.updateStatus('connecting');
                if (this.ws) this.ws.close();

                this.ws = new WebSocket('ws://localhost:8080');
                this.ws.onopen = () => this.updateStatus('connected');
                this.ws.onmessage = event => this.processMessage(event.data);
                this.ws.onclose = this.ws.onerror = () => {
                    this.updateStatus('disconnected');
                    setTimeout(() => this.connect(), 3000);
                };
            }

            updateStatus(state) {
                const states = {
                    connected: { color: 'var(--status-connected)', text: 'Connected', pulse: true },
                    connecting: { color: 'var(--status-connecting)', text: 'Connecting...', pulse: true },
                    disconnected: { color: 'var(--status-disconnected)', text: 'Disconnected - Retrying...', pulse: false }
                };
                const { color, text, pulse } = states[state];
                const [indicator, textEl] = this.statusEl.children;
                
                indicator.style.backgroundColor = color;
                indicator.classList.toggle('animate-pulse', pulse);
                textEl.textContent = text;
            }

            processMessage(data) {
                try {
                    // Assuming the incoming message is a JSON string of the log batch
                    const logs = JSON.parse(data); 
                    if (Array.isArray(logs)) {
                        this.renderLogBatch(logs);
                    }
                } catch (e) {
                    console.error("Failed to parse message:", data, e);
                    // Fallback for non-JSON or malformed data
                    this.renderPlainText(data);
                }
            }

            renderLogBatch(logs) {
                const postRequest = logs.find(log => log.toLowerCase().includes('post'));
                const postTitle = postRequest ? postRequest.match(/POST\s+(.+)/i)?.[1]?.trim() : 'Request';

                const treeData = this.buildTree(logs);
                
                const card = document.createElement('div');
                card.className = 'bg-white rounded-lg shadow-sm border border-gray-200';
                card.innerHTML = `
                    <div class="p-4 border-b border-gray-200">
                        <h2 class="text-md font-semibold text-gray-700">POST: <span class="text-blue-600">${postTitle}</span></h2>
                    </div>
                    <div class="p-4 log-tree"></div>
                `;
                
                this.logContainer.prepend(card);
                // Use the TreeView library to render the structured logs
                new TreeView(treeData, card.querySelector('.log-tree'));
            }

            buildTree(logs) {
                const tree = [];
                let currentFunction = null;

                logs.forEach(log => {
                    const enteringMatch = log.match(/-> Entering:\s*(.+)/);
                    if (enteringMatch) {
                        const funcName = enteringMatch[1].trim().split('.').pop();
                        currentFunction = { name: `<strong>${funcName}</strong>`, children: [] };
                        tree.push(currentFunction);
                    } else if (!log.includes('->') && !log.includes('<-')) {
                        const targetNode = currentFunction ? currentFunction.children : tree;
                        targetNode.push({ name: `<div class="log-entry">${log}</div>` });
                    }
                });
                return tree;
            }
            
            renderPlainText(data) {
                const pre = document.createElement('pre');
                pre.className = 'log-entry';
                pre.textContent = data;
                this.logContainer.prepend(pre);
            }
        }

        document.addEventListener('DOMContentLoaded', () => new LogVisualizer());
    </script>
</body>
</html>
