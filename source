<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced Enterprise Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css" integrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/split.js/dist/split.min.js"></script>

    <style>
        body { 
            -webkit-font-smoothing: antialiased; 
            -moz-osx-font-smoothing: grayscale;
            min-width: 450px; 
        }

        .gutter { background-color: #4a5568; transition: background-color 0.2s ease, opacity 0.3s ease; }
        .gutter.gutter-horizontal { cursor: col-resize; }
        .gutter:hover { background-color: #b81830; }
        .gutter-disabled { opacity: 0; pointer-events: none; }

        .dashboard-panel { transition: width 0.5s cubic-bezier(0.4, 0, 0.2, 1); }
        .panel-content-wrapper { position: relative; flex-grow: 1; overflow: hidden; background-color: inherit; }
        .panel-view { position: absolute; inset: 0; display: flex; flex-direction: column; padding: 1rem 1rem 1rem 0rem; transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1); }
        
        .main-content-view { transform: translateX(0); padding: 0; }
        .settings-view { transform: translateX(100%); }
        .settings-active .main-content-view { transform: translateX(-100%); }
        .settings-active .settings-view { transform: translateX(0); }

        .icon { width: 1.25rem; height: 1.25rem; }
        .panel-button { display: flex; align-items: center; justify-content: center; background: none; border: 1px solid transparent; color: #d1d5db; cursor: pointer; padding: 0.25rem; border-radius: 0.25rem; transition: background-color 0.2s ease; }
        .panel-button:hover { background-color: #374151; }

        ::-webkit-scrollbar { width: 6px; height: 6px;}
        ::-webkit-scrollbar-track { background: #2d2d2d; border-radius: 3px; }
        ::-webkit-scrollbar-thumb { background: #b81830; border-radius: 3px; }
        * { scrollbar-width: thin; scrollbar-color: #b81830 #2d2d2d; }

        #logs-content-area { display: grid; align-content: start; overflow-y: scroll; overflow-x: auto; }
        .log-entry { display: flex; align-items: baseline; background-color: #0e0e0e; padding: 0.1rem 0.5rem; font-family: monospace; font-size: 0.875rem; }
        .log-entry:nth-child(even) { background-color: #111111; }
        .log-prefix { flex-shrink: 0; width: 100px; font-weight: bold; color: #b81830; margin-right: 1rem; }
        .log-message { white-space: pre; }
        
        .status-indicator-circle { width: 0.75rem; height: 0.75rem; border-radius: 9999px; transition: background-color 0.3s ease; }
        .status-connecting { background-color: #f59e0b; }
        .status-connected { background-color: #22c55e; }
        .status-disconnected { background-color: #ef4444; }

        /* --- Updated styles for Call Stack Visualizer --- */
        #call-stack-flow { overflow-y: auto; overflow-x: hidden; }
        .call-stack-title { color: #9ca3af; font-weight: bold; text-transform: uppercase; font-size: 0.9rem; }
        
        .call-stack-item { 
            border: 1px solid #2d2d2d; 
            border-radius: 8px; 
            margin-bottom: 8px; 
            background-color: #181818; 
            border-left: 4px solid #b81830; 
            cursor: pointer; 
            transition: all 0.2s ease; 
            padding: 12px; 
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }
        .call-stack-item:hover { 
            background-color: #202020; 
            border-left-color: #d1263a;
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.4);
        }
        
        /* FIXED: Better flex layout for natural text wrapping */
        .call-stack-header { 
            display: flex; 
            align-items: flex-start; 
            gap: 0.75rem; 
            margin-bottom: 6px; /* Add some separation from footer */
        }
        .flow-prefix { 
            color: #6b7280; 
            font-weight: 700; 
            flex-shrink: 0; /* Prevent prefix from shrinking */
            background-color: #2d2d2d;
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 0.75rem;
            min-width: 24px;
            text-align: center;
        }
        
        /* FIXED: Natural text wrapping instead of aggressive breaking */
        .call-stack-name { 
            font-weight: 600; 
            color: #e5e7eb; 
            flex: 1; /* Take remaining space */
            overflow-wrap: break-word; /* Break long words naturally */
            word-wrap: break-word; /* Legacy support */
            line-height: 1.4; /* Better line spacing for multi-line text */
            font-size: 0.95rem;
            /* Removed word-break: break-all for more natural breaking */
        }

        .call-stack-footer { display: flex; justify-content: flex-end; align-items: center; gap: 1rem; }
        .call-stack-duration { 
            color: #22c55e; 
            font-size: 0.8rem; 
            flex-shrink: 0; 
            font-weight: 600;
            background-color: rgba(34, 197, 94, 0.1);
            padding: 2px 6px;
            border-radius: 4px;
        }
        .expand-icon { transition: transform 0.2s ease; color: #9ca3af; flex-shrink: 0; width: 16px; height: 16px; }
        .expand-icon.expanded { transform: rotate(90deg); }

        /* FIXED: Prevent layout shift on expand */
        .call-stack-content { 
            max-height: 0; 
            overflow: hidden; 
            transition: max-height 0.3s ease-out; 
            padding-left: 0; /* Reset padding */
            position: relative; /* Ensure proper containment */
        }
        .call-stack-content.expanded { 
            max-height: 2000px; /* Increased for larger content */
            margin-top: 8px; 
        }

        /* Improved log styling with better visual separation */
        .call-stack-logs-section {
            background-color: #0a0a0a;
            border: 1px solid #2d2d2d;
            border-radius: 6px;
            padding: 8px;
            margin-bottom: 12px;
        }
        
        .call-stack-logs-title {
            color: #9ca3af;
            font-size: 0.8rem; /* Swapped: made larger */
            font-weight: 700;
            text-transform: uppercase;
            margin-bottom: 6px;
            padding-bottom: 4px;
            border-bottom: 1px solid #2d2d2d;
            letter-spacing: 0.5px;
        }
        
        .call-stack-log { 
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 0.75rem; /* Swapped: made smaller */
            color: #d1d5db; 
            background-color: #111111; 
            padding: 6px 8px; 
            border-radius: 4px; 
            margin-bottom: 4px; 
            overflow-wrap: break-word; 
            white-space: pre-wrap; 
            border-left: 2px solid #374151;
            line-height: 1.3;
        }
        
        .call-stack-log:last-child {
            margin-bottom: 0;
        }
        
        /* Enhanced nested calls styling */
        .nested-calls { 
            padding-left: 20px; 
            margin-top: 12px; 
            border-left: 3px solid #374151; 
            position: relative;
        }
        
        .nested-calls::before {
            content: '';
            position: absolute;
            left: -3px;
            top: 0;
            bottom: 0;
            width: 3px;
            background: linear-gradient(to bottom, #b81830, #6b7280);
            border-radius: 2px;
        }
        
        /* Nested items get slightly different styling */
        .nested-calls .call-stack-item {
            background-color: #151515;
            border-left-color: #6b7280;
            margin-bottom: 6px;
        }
        
        .nested-calls .call-stack-item:hover {
            background-color: #1a1a1a;
        }

        .call-stack-meta-row { display: flex; align-items: flex-start; gap: 1.5rem; margin-bottom: 1.5rem; }
        .call-stack-meta-item .meta-title { color: #9ca3af; font-size: 0.8rem; font-weight: bold; text-transform: uppercase; margin-bottom: 0.25rem; }
        .call-stack-meta-item .meta-value { color: #d1d5db; font-weight: 600; display: flex; align-items: center; gap: 0.5rem; }
        .status-circle { width: 10px; height: 10px; border-radius: 50%; }
        .status-ok { background-color: #22c55e; }
        .status-warn { background-color: #f59e0b; }
        .status-error { background-color: #ef4444; }

        .flow-controls { 
            display: flex; 
            align-items: center; 
            justify-content: space-between; 
            margin-bottom: 0.75rem;
            position: sticky; /* Prevent displacement */
            top: 0;
            z-index: 10;
            background-color: #0e0e0e;
            padding-bottom: 0.5rem;
        }
        .flow-control-buttons { 
            display: flex; 
            gap: 0.5rem; 
        }
        .flow-control-buttons button { 
            background: #2d2d2d; 
            color: #9ca3af; 
            border: none; 
            padding: 0.375rem 0.625rem; /* Made smaller */
            font-size: 0.8rem; /* Made smaller */
            font-weight: 600; 
            border-radius: 4px; 
            cursor: pointer; 
            transition: all 0.15s ease; /* Faster transition */
            text-transform: uppercase; 
            min-width: auto; /* Remove fixed width */
        }
        .flow-control-buttons button:hover { 
            background: #374151; 
            color: #e5e7eb; 
            transform: translateY(-1px);
        }

        .call-stack-nav-controls { display: flex; justify-content: space-between; margin-top: auto; padding-top: 1rem; }
        .call-stack-nav-button { background: none; border: none; color: #6b7280; font-size: 0.875rem; font-weight: 600; cursor: pointer; transition: color 0.2s ease; }
        .call-stack-nav-button:not(:disabled):hover { color: #d1d5db; }
        .call-stack-nav-button:disabled { color: #374151; cursor: not-allowed; }
    </style>
</head>
<body class="bg-[#0e0e0e] text-white h-full flex flex-col overflow-hidden">

    <header class="application-header bg-[#181818] px-3 py-2 flex items-center justify-between flex-shrink-0 z-10">
        <div class="flex items-center whitespace-nowrap"><h1 class="text-[#b81830] text-2xl font-bold">Comp</h1><span class="text-gray-400 ml-3 text-sm">Service</span></div>
        <nav class="flex-grow flex justify-end items-center"><span class="text-gray-400 mr-4 text-sm font-semibold">Pages</span><div class="flex items-center gap-2"><a href="#" class="text-white bg-[#b81830] hover:bg-[#a1152a] transition-colors px-4 py-2 rounded-md text-sm font-medium">Debugger</a></div></nav>
    </header>

    <main id="dashboard-container" class="flex-grow flex w-full overflow-hidden">

        <section id="logs-panel" class="dashboard-panel p-3 flex flex-col bg-[#181818]">
             <div class="flex justify-between items-center mb-4 flex-shrink-0">
                <div class="flex items-center gap-4"><h2 class="text-xl font-semibold whitespace-nowrap">Live Logs</h2><div class="flex items-center gap-2"><span class="text-sm text-gray-400">Websockets Status</span><div id="ws-status-indicator" class="status-indicator-circle status-connecting"></div></div></div>
                <div class="panel-controls flex items-center gap-2"><button class="settings-toggle panel-button focus:outline-none" data-panel-id="logs-panel" title="Settings"><i class="fa-solid fa-gear text-sm"></i></button><button class="reset-layout-button panel-button hidden focus:outline-none" title="Reset Size"><i class="fa-solid fa-arrows-rotate text-sm"></i></button></div>
            </div>
            <div class="panel-content-wrapper" data-panel-id="logs-panel">
                <div class="panel-view main-content-view"><div id="logs-content-area" class="flex-grow"></div></div>
                <div class="panel-view settings-view"><div class="flex justify-between items-center w-full"><h3 class="text-sm font-semibold text-gray-300">Settings</h3><button class="settings-back-button panel-button text-sm flex items-center gap-1 focus:outline-none" data-panel-id="logs-panel">← Back</button></div></div>
            </div>
        </section>

        <!-- Call Stack Panel -->
        <section id="stack-panel" class="dashboard-panel p-3 flex flex-col bg-[#0e0e0e]">
            <div class="flex justify-between items-center mb-4 flex-shrink-0"><h2 class="text-xl font-semibold whitespace-nowrap">Call Stack</h2><div class="panel-controls flex items-center gap-2"><button class="settings-toggle panel-button focus:outline-none" data-panel-id="stack-panel" title="Settings"><i class="fa-solid fa-gear text-sm"></i></button><button class="reset-layout-button panel-button hidden focus:outline-none" title="Reset Size"><i class="fa-solid fa-arrows-rotate text-sm"></i></button></div></div>
            <div class="panel-content-wrapper" data-panel-id="stack-panel">
                <div class="panel-view main-content-view p-4 pl-0 flex flex-col">
                    <h3 class="call-stack-title">Latest API Call</h3>
                    <p id="latest-api-call" class="font-mono text-gray-300 min-h-[1.5em] mb-4"></p>
                    
                    <div class="call-stack-meta-row">
                        <div class="call-stack-meta-item">
                            <div class="meta-title">Time</div>
                            <div id="api-call-time" class="meta-value">-</div>
                        </div>
                        <div class="call-stack-meta-item">
                            <div class="meta-title">STATUS</div>
                            <div id="api-call-status" class="meta-value">-</div>
                        </div>
                        <div id="api-call-error-container" class="call-stack-meta-item" style="display: none;">
                            <div class="meta-title">Error</div>
                            <div id="api-call-error" class="meta-value">-</div>
                        </div>
                    </div>

                    <div class="flow-controls">
                        <h3 class="call-stack-title">FLOW</h3>
                        <div class="flow-control-buttons">
                            <button id="expand-all-btn">EXPAND ALL</button>
                            <button id="collapse-all-btn">COLLAPSE ALL</button>
                        </div>
                    </div>
                    <div id="call-stack-flow" class="flex-grow pt-2"></div>
                    <div class="call-stack-nav-controls">
                        <button id="prev-call-btn" class="call-stack-nav-button">← Previous Call</button>
                        <button id="next-call-btn" class="call-stack-nav-button">Next Call →</button>
                    </div>
                </div>
                <div class="panel-view settings-view"><div class="flex justify-between items-center w-full"><h3 class="text-sm font-semibold text-gray-300">Settings</h3><button class="settings-back-button panel-button text-sm flex items-center gap-1 focus:outline-none" data-panel-id="stack-panel">← Back</button></div></div>
            </div>
        </section>
    </main>

    <script>
        class DashboardManager {
            constructor() {
                // Core elements
                this.container = document.getElementById('dashboard-container');
                this.logsArea = document.getElementById('logs-content-area');
                this.statusIndicator = document.getElementById('ws-status-indicator');
                this.latestApiCall = document.getElementById('latest-api-call');
                this.apiCallTime = document.getElementById('api-call-time');
                this.apiCallStatus = document.getElementById('api-call-status');
                this.apiCallError = document.getElementById('api-call-error');
                this.apiCallErrorContainer = document.getElementById('api-call-error-container');
                this.callStackFlow = document.getElementById('call-stack-flow');
                this.prevCallBtn = document.getElementById('prev-call-btn');
                this.nextCallBtn = document.getElementById('next-call-btn');

                // State
                this.postHistory = [];
                this.currentHistoryIndex = -1;
                this.postRequestCounter = 0;
                this.postMessageBuffer = [];
                this.isInsidePostBlock = false;
                this.isLogAreaCleared = true;
                this.websocket = null;

                // Constants
                this.MAX_HISTORY = 10;
                this.DEFAULT_SIZES = [65, 35];

                this.init();
            }

            init() {
                // Initialize split layout
                this.splitInstance = Split(['#logs-panel', '#stack-panel'], {
                    sizes: this.DEFAULT_SIZES,
                    minSize: 320,
                    gutterSize: 8,
                    onDrag: () => this.checkLayout()
                });

                // Event delegation
                this.container.addEventListener('click', this.handleClick.bind(this));
                
                // Responsive handling
                new ResizeObserver(entries => {
                    const width = entries[0].contentRect.width;
                    const gutter = this.container.querySelector('.gutter');
                    if (width < 700) {
                        gutter.classList.add('gutter-disabled');
                        this.resetLayout();
                    } else {
                        gutter.classList.remove('gutter-disabled');
                    }
                }).observe(this.container);

                // Connect WebSocket
                this.connectWebSocket();
                this.displaySystemMessage("CONNECTING...");
                this.updateNavButtons();
            }

            connectWebSocket() {
                this.websocket = new WebSocket("ws://127.0.0.1:8000/ws/logs");
                this.websocket.onopen = () => {
                    this.statusIndicator.className = 'status-indicator-circle status-connected';
                    this.displaySystemMessage("CONNECTION ESTABLISHED. WAITING FOR LOGS...");
                };
                this.websocket.onmessage = (event) => this.handleLogMessage(event.data);
                this.websocket.onclose = () => {
                    this.statusIndicator.className = 'status-indicator-circle status-disconnected';
                    this.displaySystemMessage("CONNECTION CLOSED. AWAITING CONNECTION...");
                };
                this.websocket.onerror = () => {
                    this.statusIndicator.className = 'status-indicator-circle status-disconnected';
                    this.displaySystemMessage("CONNECTION FAILED. PLEASE CHECK THE SERVER.");
                };
            }

            handleLogMessage(message) {
                if (this.isLogAreaCleared) {
                    this.logsArea.innerHTML = '';
                    this.isLogAreaCleared = false;
                }

                if (message.includes("-> POST")) {
                    this.isInsidePostBlock = true;
                    this.postMessageBuffer = [message];
                } else if (message.includes("<- POST")) {
                    this.postMessageBuffer.push(message);
                    this.processPostBlock();
                    this.isInsidePostBlock = false;
                } else {
                    if (this.isInsidePostBlock) {
                        this.postMessageBuffer.push(message);
                    } else {
                        this.renderLogEntry("Raw Log", message);
                    }
                }
            }

            processPostBlock() {
                const title = `POST #${++this.postRequestCounter}`;
                this.postMessageBuffer.forEach(log => this.renderLogEntry(title, log));
                
                const callData = this.parseCallStack(this.postMessageBuffer);
                if (callData) {
                    this.postHistory.push(callData);
                    if (this.postHistory.length > this.MAX_HISTORY) this.postHistory.shift();
                    this.currentHistoryIndex = this.postHistory.length - 1;
                    this.displayCall(this.currentHistoryIndex);
                }
            }

            parseCallStack(logs) {
                const apiMatch = logs[0].match(/POST (\/\S+)/);
                if (!apiMatch) return null;

                const root = { name: 'POST Request', children: [], logs: [], duration: 'N/A' };
                const stack = [root];

                logs.forEach(log => {
                    const current = stack[stack.length - 1];
                    let match;

                    if ((match = log.match(/-> Entering: (.*)/))) {
                        const node = { name: match[1], children: [], logs: [], duration: 'N/A' };
                        current.children.push(node);
                        stack.push(node);
                    } else if ((match = log.match(/<- Exiting: .* - (.*s)/))) {
                        if (stack.length > 1) {
                            stack.pop().duration = match[1] || 'N/A';
                        }
                    } else if ((match = log.match(/<- POST .* - (\d+) - (.*s)/))) {
                        root.statusCode = match[1];
                        root.duration = match[2];
                    } else if ((match = log.match(/\| ERROR \| (.*)/))) {
                        root.error = match[1].trim();
                        current.logs.push(log);
                    } else if (!log.includes("-> POST")) {
                        current.logs.push(log);
                    }
                });

                return { apiCall: apiMatch[1], callStack: root };
            }

            displayCall(index) {
                const data = this.postHistory[index];
                if (!data) return;

                this.latestApiCall.textContent = data.apiCall;
                this.apiCallTime.textContent = data.callStack.duration;

                const status = data.callStack.statusCode;
                const statusClass = status >= 500 ? 'status-error' : status >= 200 && status < 300 ? 'status-ok' : 'status-warn';
                this.apiCallStatus.innerHTML = `<div class="status-circle ${statusClass}"></div> ${status}`;

                if (data.callStack.error) {
                    this.apiCallError.textContent = data.callStack.error;
                    this.apiCallErrorContainer.style.display = 'block';
                } else {
                    this.apiCallErrorContainer.style.display = 'none';
                }

                this.renderCallStack(data.callStack);
                this.updateNavButtons();
            }

            renderCallStack(stack) {
                this.callStackFlow.innerHTML = '';

                // Render function calls
                stack.children.forEach((node, i) => {
                    this.callStackFlow.appendChild(this.createCallNode(node, `${i + 1}.`));
                });

                // Render top-level logs
                const topLogs = stack.logs.filter(log => !log.includes("| ERROR |"));
                if (topLogs.length > 0) {
                    this.callStackFlow.appendChild(this.createLogsSection(topLogs, `Top Level Logs (${topLogs.length})`));
                }
            }

            createCallNode(node, prefix) {
                const hasContent = node.logs.length > 0 || node.children.length > 0;
                const div = document.createElement('div');
                div.className = 'call-stack-item';
                
                div.innerHTML = `
                    <div class="call-stack-header">
                        <span class="flow-prefix">${prefix}</span>
                        <span class="call-stack-name">${node.name}</span>
                    </div>
                    <div class="call-stack-footer">
                        <span class="call-stack-duration">${node.duration}</span>
                        ${hasContent ? '<svg class="expand-icon" viewBox="0 0 16 16" fill="currentColor"><path d="M6 4l4 4-4 4"></path></svg>' : ''}
                    </div>
                `;

                if (hasContent) {
                    const content = document.createElement('div');
                    content.className = 'call-stack-content';

                    if (node.logs.length > 0) {
                        content.appendChild(this.createLogsSection(node.logs, `Logs (${node.logs.length})`));
                    }

                    if (node.children.length > 0) {
                        const nested = document.createElement('div');
                        nested.className = 'nested-calls';
                        node.children.forEach((child, i) => {
                            nested.appendChild(this.createCallNode(child, `${prefix}${i + 1}.`));
                        });
                        content.appendChild(nested);
                    }

                    div.appendChild(content);
                }

                return div;
            }

            createLogsSection(logs, title) {
                const section = document.createElement('div');
                section.className = 'call-stack-logs-section';
                
                const titleDiv = document.createElement('div');
                titleDiv.className = 'call-stack-logs-title';
                titleDiv.textContent = title;
                section.appendChild(titleDiv);

                logs.forEach(log => {
                    const logDiv = document.createElement('div');
                    logDiv.className = 'call-stack-log';
                    logDiv.textContent = log;
                    section.appendChild(logDiv);
                });

                return section;
            }

            // Optimized expand/collapse with direct class manipulation
            toggleAllFlowNodes(expand) {
                const selector = expand ? '.call-stack-content:not(.expanded)' : '.call-stack-content.expanded';
                const iconSelector = expand ? '.expand-icon:not(.expanded)' : '.expand-icon.expanded';
                
                this.callStackFlow.querySelectorAll(selector).forEach(el => el.classList.toggle('expanded', expand));
                this.callStackFlow.querySelectorAll(iconSelector).forEach(el => el.classList.toggle('expanded', expand));
            }

            handleClick(e) {
                const target = e.target;
                const button = target.closest('button');
                
                if (!button) {
                    // Handle call stack item clicks
                    const item = target.closest('.call-stack-item');
                    if (item) {
                        const content = item.querySelector('.call-stack-content');
                        const icon = item.querySelector('.expand-icon');
                        if (content) {
                            content.classList.toggle('expanded');
                            icon?.classList.toggle('expanded');
                        }
                    }
                    return;
                }

                // Handle button clicks
                switch (button.id) {
                    case 'prev-call-btn':
                        if (this.currentHistoryIndex > 0) {
                            this.displayCall(--this.currentHistoryIndex);
                        }
                        break;
                    case 'next-call-btn':
                        if (this.currentHistoryIndex < this.postHistory.length - 1) {
                            this.displayCall(++this.currentHistoryIndex);
                        }
                        break;
                    case 'expand-all-btn':
                        this.toggleAllFlowNodes(true);
                        break;
                    case 'collapse-all-btn':
                        this.toggleAllFlowNodes(false);
                        break;
                }

                // Handle other button actions
                if (button.classList.contains('reset-layout-button')) {
                    this.resetLayout();
                } else if (button.classList.contains('settings-toggle') || button.classList.contains('settings-back-button')) {
                    const panelId = button.dataset.panelId;
                    document.querySelector(`.panel-content-wrapper[data-panel-id="${panelId}"]`)?.classList.toggle('settings-active');
                }
            }

            checkLayout() {
                const isCustomized = Math.abs(this.splitInstance.getSizes()[0] - this.DEFAULT_SIZES[0]) > 1;
                document.querySelectorAll('.reset-layout-button').forEach(btn => {
                    btn.classList.toggle('hidden', !isCustomized);
                });
            }

            resetLayout() {
                this.splitInstance.setSizes(this.DEFAULT_SIZES);
                this.checkLayout();
            }

            updateNavButtons() {
                this.prevCallBtn.disabled = this.currentHistoryIndex <= 0;
                this.nextCallBtn.disabled = this.currentHistoryIndex >= this.postHistory.length - 1;
            }

            displaySystemMessage(message) {
                this.logsArea.innerHTML = `<div class="flex items-center justify-center h-full p-4"><p class="text-2xl font-bold text-gray-500">${message}</p></div>`;
                this.isLogAreaCleared = true;
            }

            renderLogEntry(prefix, message) {
                const entry = document.createElement('div');
                entry.className = 'log-entry';
                entry.innerHTML = `<span class="log-prefix">${prefix}</span><span class="log-message">${message}</span>`;
                this.logsArea.appendChild(entry);
                this.logsArea.scrollTop = this.logsArea.scrollHeight;
            }
        }

        document.addEventListener('DOMContentLoaded', () => new DashboardManager());
    </script>
</body>
</html>
