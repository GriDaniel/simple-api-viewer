<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Enterprise WebSocket Log Visualizer</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.16/jstree.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.16/themes/default/style.min.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        :root { --brand-color: #2563eb; }
        .brand-bg { background-color: var(--brand-color); }
        .brand-hover:hover { background-color: #1d4ed8; }
        .jstree-default .jstree-node { margin: 4px 0; }
        .jstree-default .jstree-anchor { padding: 8px 12px; border-radius: 6px; }
        .post-node { background: #dbeafe !important; color: #1e40af !important; font-weight: 600; }
        .function-node { background: #f3f4f6 !important; color: #374151 !important; }
        .entry-error { background: #fef2f2 !important; color: #dc2626 !important; }
        .entry-warn { background: #fffbeb !important; color: #d97706 !important; }
        .entry-info { background: #eff6ff !important; color: #2563eb !important; }
    </style>
</head>
<body class="bg-gray-50 min-h-screen">
    <div class="max-w-7xl mx-auto px-6 py-8">
        <div class="bg-white rounded-lg shadow-sm border p-6 mb-6">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <div id="status" class="flex items-center space-x-2">
                        <div class="w-3 h-3 bg-red-500 rounded-full"></div>
                        <span class="text-sm font-medium">Connecting...</span>
                    </div>
                    <div class="text-sm text-gray-500">
                        Port: <input id="port" type="number" value="8080" class="w-16 px-2 py-1 border rounded text-center">
                    </div>
                </div>
                <div class="text-sm text-gray-500">Auto-connecting...</div>
            </div>
        </div>
        
        <div class="bg-white rounded-lg shadow-sm border">
            <div class="p-6 border-b">
                <h2 class="text-lg font-semibold">POST Request Lifecycle</h2>
            </div>
            <div id="tree" class="p-6 min-h-96"></div>
        </div>
    </div>

    <script>
        class LogVisualizer {
            constructor() {
                this.ws = null;
                this.buffer = [];
                this.isBuffering = false;
                this.reconnectInterval = null;
                
                $('#port').change(() => this.connect());
                $('#tree').jstree({ 
                    core: { data: [], themes: { dots: false } },
                    plugins: ['types'],
                    types: {
                        post: { icon: 'fas fa-play-circle' },
                        function: { icon: 'fas fa-code' },
                        entry: { icon: 'fas fa-circle' }
                    }
                });
                
                this.connect();
            }

            connect() {
                this.disconnect();
                const port = $('#port').val();
                this.updateStatus('connecting');
                
                this.ws = new WebSocket(`ws://localhost:${port}`);
                
                this.ws.onopen = () => {
                    this.updateStatus('connected');
                    clearInterval(this.reconnectInterval);
                };
                
                this.ws.onmessage = e => this.handleMessage(e.data);
                
                this.ws.onclose = this.ws.onerror = () => {
                    this.updateStatus('disconnected');
                    this.startReconnect();
                };
            }

            startReconnect() {
                if (this.reconnectInterval) return;
                this.reconnectInterval = setInterval(() => this.connect(), 3000);
            }

            disconnect() {
                this.ws?.close();
                this.ws = null;
                clearInterval(this.reconnectInterval);
                this.reconnectInterval = null;
                this.buffer = [];
                this.isBuffering = false;
            }

            updateStatus(state) {
                const status = $('#status');
                
                switch(state) {
                    case 'connected':
                        status.html('<div class="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div><span class="text-sm font-medium text-green-600">Connected</span>');
                        break;
                    case 'connecting':
                        status.html('<div class="w-3 h-3 bg-yellow-500 rounded-full animate-pulse"></div><span class="text-sm font-medium text-yellow-600">Connecting...</span>');
                        break;
                    case 'disconnected':
                        status.html('<div class="w-3 h-3 bg-red-500 rounded-full"></div><span class="text-sm font-medium text-red-600">Disconnected - Retrying...</span>');
                        break;
                }
            }

            handleMessage(data) {
                const entry = this.parseEntry(data);
                const msg = entry.message.toLowerCase();
                
                if (msg.includes('post') && (msg.includes('start') || msg.includes('begin'))) {
                    this.buffer = [entry];
                    this.isBuffering = true;
                } else if (this.isBuffering) {
                    this.buffer.push(entry);
                    if (msg.includes('post') && (msg.includes('end') || msg.includes('complete'))) {
                        this.renderTree();
                        this.isBuffering = false;
                    }
                }
            }

            parseEntry(data) {
                try {
                    return JSON.parse(data);
                } catch {
                    return { message: data, level: 'INFO', timestamp: Date.now() };
                }
            }

            renderTree() {
                const grouped = _.groupBy(this.buffer, entry => {
                    const msg = entry.message;
                    const match = msg.match(/(\w+(?:Controller|Service|Repository))\.(\w+)/);
                    return match ? `${match[1]}.${match[2]}` : 'General';
                });

                const duration = this.buffer.length > 1 ? 
                    `${new Date(_.last(this.buffer).timestamp) - new Date(_.first(this.buffer).timestamp)}ms` : '0ms';

                const treeData = [{
                    id: `post_${Date.now()}`,
                    text: `POST Request - ${duration}`,
                    type: 'post',
                    a_attr: { class: 'post-node' },
                    state: { opened: true },
                    children: Object.entries(grouped).map(([name, entries]) => ({
                        id: `func_${name}_${Date.now()}`,
                        text: `${name} (${entries.length} entries)`,
                        type: 'function',
                        a_attr: { class: 'function-node' },
                        children: entries.map((entry, i) => ({
                            id: `entry_${i}_${Date.now()}`,
                            text: `[${entry.level}] ${entry.message}`,
                            type: 'entry',
                            a_attr: { class: `entry-${entry.level.toLowerCase()}` }
                        }))
                    }))
                }];

                $('#tree').jstree(true).settings.core.data = treeData;
                $('#tree').jstree(true).refresh();
            }
        }

        $(() => new LogVisualizer());
    </script>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
</body>
</html>
